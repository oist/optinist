[tool.poetry]
name = "optinist"
description = "Calcium Imaging Pipeline Tool"
version = "1.1.0"
license = "GPL-3.0"
authors = ["OIST <email@example.com>"]
readme = "README.md"
documentation = "https://optinist.readthedocs.io"
repository = "https://github.com/oist/optinist"
keywords = ["optinist"]
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS :: MacOS X",
]
packages = [{ include = "studio" }]

include = [
  "frontend/build/*",
  "frontend/build/static/*",
  "frontend/build/static/css/*",
  "frontend/build/static/js/*",
  "frontend/build/static/media/*",
  "studio/app/optinist/core/nwb/nwb.yaml",
  "studio/app/common/core/snakemake/snakemake.yaml",
  "studio/app/*/wrappers/**/*.yaml",
  "studio/app/Snakefile",
  "studio/config/*.yaml",
  "sample_data/input/*",
  "sample_data/output/**/*.yaml",
]
exclude = ["studio/tests/*", "studio/test_data/*", "conda.env.*"]

[tool.poetry.dependencies]
python = "^3.8.1"
fastapi = "0.104.*"
uvicorn = "0.24.*"
numpy = { version = ">=1.23, <1.27" }
aiofiles = "*"
tqdm = "*"
pyyaml = "*"
imageio = "*"
tifffile = "*"
python-multipart = "*"
future = "*"
pynwb = "2.2.0"
psutil = "*"
nbstripout = "*"
snakemake = { version = ">=7.24, <7.31" }
jinja2 = "3.1.*"
httpx = "*"
firebase_admin = "*"
pyrebase4 = "4.7.1"
pydantic = { version = "1.10.13", extras = ["email", "dotenv"] }
python-jose = { version = "*", extras = ["cryptography"] }
alembic = "1.13.1"
sqlmodel = "0.0.12"
pymysql = "1.1.0"
fastapi_pagination = "0.12.13"
plotly = "5.18.0"
kaleido = "0.2.1"
filelock = "*"
ruamel-yaml = "^0.18.5"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "*"
flake8 = "6.1.*"
isort = "*"
pre-commit = "*"
codespell = "*"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
sphinx = "7.1.2"
sphinxcontrib-apidoc = "*"
sphinx-rtd-theme = "^1.3.0"
sphinx-prompt = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "0.5.2"
sphinx-autobuild = "2021.3.14"
myst-parser = "*"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-env = "*"

[tool.poetry.scripts]
run_optinist = "studio.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
pythonpath = "."
env = ["OPTINIST_DIR=studio/test_data"]

[tool.codespell]
skip = './frontend/build,./frontend/node_modules,./docs/_build,*.lock,*log,*.egg-info'
ignore-words = '.codespellignore'
